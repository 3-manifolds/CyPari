# We use AppVeyor to build our Windows binaries automatically:
#
# https://ci.appveyor.com/project/nathan_dunfield/cypari-v7ul8

image:
  - Visual Studio 2015

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/build-environment#python
    # Available mingw-264 gcc toolchains are listed at
    # http://www.appveyor.com/docs/build-environment/#mingw-msys-cygwin
    # A build job will be started for each definition below.

    - PYTHON: C:\Python27
      TOOLCHAIN: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32
      
    - PYTHON: C:\Python27-x64
      TOOLCHAIN: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64

    - PYTHON: C:\Python35
      TOOLCHAIN: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32
      
    - PYTHON: C:\Python35-x64
      TOOLCHAIN: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64

    - PYTHON: C:\Python36
      TOOLCHAIN: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32
      
    - PYTHON: C:\Python36-x64
      TOOLCHAIN: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64

    - PYTHON: C:\Python37
      TOOLCHAIN: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32

    - PYTHON: C:\Python37-x64
      TOOLCHAIN: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64

    - PYTHON: C:\Python38
      TOOLCHAIN: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32

    - PYTHON: C:\Python38-x64
      TOOLCHAIN: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64

install:
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  
  # Print available toolchains
  - dir C:\mingw-w64

  # Install python packages
  - "%PYTHON%\\python.exe -m pip install --upgrade pip setuptools"
  - "%PYTHON%\\python.exe -m pip install six wheel future cython"

  # Patch up the mingw toolchains
  - set PATH=%TOOLCHAIN%\bin;C:\Perl\bin;%PATH%;
  - set MSYSTEM=MINGW32
  - cd Version2\Windows\toolchain
  - "bash install_files_32.sh"
  - "bash install_files_64.sh"
  - cd ..\crt
  - copy stdio.h C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\i686-w64-mingw32\include
  - copy stdio.h C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\x86_64-w64-mingw32\include
  - cd ..\..

  # Build CyPari. 
  - dir cypari_src
  - "%PYTHON%\\python.exe setup.py build"

cache:
  - Version2\libcache

build:
  none

test_script:
  # Put your test command here.
  - "%PYTHON%\\python.exe setup.py test"
  
after_test:
  # This step builds your wheels.
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: Version2\dist\*.whl

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
