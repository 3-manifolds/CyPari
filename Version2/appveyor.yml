# We use AppVeyor to build our Windows binaries automatically:
#
# https://ci.appveyor.com/project/nathan_dunfield/cypari

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python27"
    #- PYTHON: "C:\\Python34"
    #- PYTHON: "C:\\Python35"
    #- PYTHON: "C:\\Python36"

install:
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  
  # CyPari is build using the 32-bin MinGW compilers, so we need them in
  # our path, plus some special sauce.
  - set PATH=C:\msys64\mingw32\bin;C:\msys64\usr\bin;%PATH%;
  - set MSYSTEM=MINGW32
  - cd Version2\Windows\toolchain
  - "bash install_files_32.sh"
  - cd ..\..

  # Must build Pari first
  - "bash build_pari.sh"
  
  # Need a few Python packages to build CyPari
  - "%PYTHON%\\python.exe -m pip install --upgrade pip setuptools"
  - "%PYTHON%\\python.exe -m pip install Cython six wheel"

  # Now build CyPari itself. 
  - "%PYTHON%\\python.exe setup.py build -c mingw32"
  - "%PYTHON%\\python.exe setup.py install"
  
build: none
  
test_script:
  # Put your test command here.
  - cd ..
  - "%PYTHON%\\python.exe -m cypari.test"

after_test:
  # This step builds your wheels.
  - cd Version2
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: Version2\dist\*.whl

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
